package cz.cvut.fit.bioop.hackernewsclient.services

import cz.cvut.fit.bioop.hackernewsclient.api.apiClients.MockApiClient
import cz.cvut.fit.bioop.hackernewsclient.api.apiObjects.User
import cz.cvut.fit.bioop.hackernewsclient.api.responseReaders.ResponseReader
import org.scalatest.funsuite.AnyFunSuite

class UserServiceTest extends AnyFunSuite {

  val userA: User = ResponseReader.toUser("{\"id\":\"KoftaBob\",\"created\":1568301021,\"karma\":1537,\"submitted\":[25447230,25444530,25444303,25391747,25385580,25335440,25335127,25159579,25150840,25138904,25125123,25082136,25060458,25002047,24989949,24943049,24933771,24907294,24902440,24876347,24870568,24854239,24791312,24791225,24777470,24734747,24667118,24664715,24650121,24581287,24424015,24368919,24352339,24345028,24343681,24343572,24307690,24293868,24292617,24286908,24282904,24262130,24213500,24202328,24099429,24082406,24062880,24038757,24038555,24037516,24036712,24034326,24025967,24021918,24020510,24019881,24012969,23977611,23949645,23939056,23931112,23929532,23929254,23917568,23917540,23898798,23898726,23882145,23871773,23821115,23821108,23815626,23774707,23773010,23736323,23706350,23706312,23679102,23677684,23654606,23613427,23565273,23565222,23554968,23541401,23540783,23531708,23526020,23417397,23391577,23378501,23361572,23340036,23325548,23315822,23313709,23302696,23298081,23297992,23293064,23292205,23262441,23240204,23234085,23233829,23228276,23224678,23209337,23205471,23200345,23192071,23154767,23154707,23147861,23147517,23147423,23146336,23146115,23142752,23134552,23105877,23087097,23084409,23084210,23084096,23084044,23084038,23070926,23068412,23049279,23041750,23022603,22975314,22971880,22968055,22909332,22836080,22814269,22813664,22813523,22803010,22802776,22802717,22794355,22783836,22781085,22769263,22761662,22760983,22748975,22743696,22711826,22693765,22693426,22657756,22627566,22624556,22597395,22495683,22468397,22467728,22436394,22436362,22386623,22371038,22366271,22350937,22349479,22328835,22311630,22298496,22289793,22250047,22196639,22196620,22193067,22192006,22187105,22119705,22119582,22118465,22064294,22064289,22056981,22049277,22042001,22030506,21982057,21969517,21962691,21962295,21962254,21958460,21958064,21949741,21918318,21873861,21868250,21846565,21837814,21815018,21803664,21763261,21752856,21752811,21746250,21737350,21736372,21731957,21731953,21724280,21703117,21683899,21647998,21547376,21547343,21506484,21465826,21463541,21463454,21402522,21355533,21355237,21334787,21334766,21325642,21322944,21282383,21275083,21262875,21237364,21237346,21225074,21192669,21192506,21191946,21191858,21183894,21158071,21148958,21148394,21147561,21147309,21147285,21136718,21130505,21130421,21129286,21129034,21128726,21128628,21128378,21128166,21126215,21115734,21096178,21092153,21081436,21080958,21073923,21073902,21071015,21064251,21053917,21042720,20995423,20995318,20962213,20952341]}").get
  val userB: User = ResponseReader.toUser("{\"id\":\"easton\",\"created\":1595444644,\"karma\":1030,\"about\":\"Currently attending Harding University for Computer Science.<p>I&#x27;m always interested in cool stuff! e-mail me at easton (at) planeteaston.com<p>(formerly jedieaston)<p>[ my public key: https:&#x2F;&#x2F;keybase.io&#x2F;jedieaston; my proof: https:&#x2F;&#x2F;keybase.io&#x2F;jedieaston&#x2F;sigs&#x2F;lu5huw0A68urY5ftOa-yQJE5LMbuOYjoIzW1862Z2N8 ]\",\"submitted\":[25437161,25434077,25430891,25430885,25421669,25418416,25418384,25413469,25401867,25378444,25326444,25283694,25283686,25281509,25273007,25270032,25268665,25262670,25262638,25262596,25260571,25250581,25224713,25199112,25171880,25169208,25155448,25152668,25150309,25142639,25137088,25136985,25131303,25129830,25126559,25126387,25126360,25119962,25119308,25106462,25105222,25082731,25074387,25070383,25062414,25053613,25050685,25050336,25046452,25036582,25036566,25031559,25031505,25008827,25004656,25000409,24998723,24998246,24995729,24989073,24984944,24984917,24979761,24964085,24961193,24959961,24957294,24942183,24941795,24938658,24938297,24935696,24924978,24924338,24918268,24910066,24904427,24904410,24902589,24898305,24895618,24892205,24892195,24891666,24891634,24891553,24891226,24881537,24876574,24869593,24842612,24842162,24839363,24831442,24821134,24818497,24810283,24804173,24801926,24800468,24797163,24795826,24795785,24795771,24794576,24788755,24787530,24784145,24781743,24771661,24771575,24768412,24765137,24758187,24754139,24750401,24741040,24733304,24725499,24724954,24722716,24712123,24707401,24701202,24701199,24681068,24664535,24662267,24662217,24662200,24643651,24643535,24641519,24639576,24638309,24630014,24627171,24622206,24615978,24610720,24610097,24607964,24604122,24604087,24600082,24584946,24584901,24562150,24554736,24553380,24539232,24530623,24519091,24504293,24500449,24500333,24499654,24494601,24492382,24488308,24484739,24464888,24449495,24448448,24446371,24446331,24436517,24431227,24380439,24375487,24370152,24341040,24340478,24337760,24326515,24322934,24320128,24300830,24285190,24281476,24278386,24278364,24272631,24255856,24248288,24219327,24219018,24215030,24199952,24199726,24190488,24177854,24146124,24135083,24130708,24128053,24094779,24090593,24086874,24086143,24080995,24077222,24054597,24051389,24051209,24050502,24048722,24048693,24048686,24037597,24036873,24022235,24019718,24008190,24007667,23996940,23996771,23996757,23989111,23988991,23988710,23979635,23978857,23966732,23956856,23956850,23940427,23935387,23929069,23920868]}").get
  val userC: User = ResponseReader.toUser("{\"id\":\"known\",\"created\":1171960091,\"karma\":10804,\"about\":\"&quot;Live well. It is the greatest revenge&quot; --Talmud\",\"submitted\":[25455416,25455014,25453405,25452528,25452435,25443288,25438671,25428464,25428020,25417414,25417018,25416646,25416607,25415428,25406433,25404475,25398583,25398077,25397069,25396760,25387247,25387145,25385315,25385064,25359959,25359939,25359644,25356649,25346571,25346565,25344640,25343677,25342964,25342653,25332086,25332052,25331992,25331885,25323659,25323428,25314529,25314528,25312488,25312451,25311603,25311592,25311565,25311548,25311532,25300085,25300036,25299983,25299739,25290097,25290051,25290015,25288727,25288487,25286575,25286489,25285776,25276797,25275114,25274957,25273849,25273846,25273436,25266127,25265945,25254030,25254002,25252398,25243463,25243450,25243008,25242753,25242742,25238432,25238425,25238370,25235515,25235491,25235424,25235209,25235192,25229813,25228654,25227908,25216994,25216692,25216683,25216652,25210149,25208765,25199283,25199191,25195597,25187659,25187641,25187420,25184394,25184125,25183814,25175031,25175027,25174508,25174492,25169864,25169828,25169780,25162372,25161865,25161337,25160552,25159331,25158341,25151193,25151079,25151001,25150837,25147395,25147208,25136837,25136521,25123644,25123263,25120850,25120526,25120228,25113048,25112889,25112865,25107920,25102195,25100838,25091483,25091267,25091252,25091195,25091181,25090536,25090255,25084004,25083848,25080516,25080408,25079222,25079190,25079187,25079180,25079164,25067522,25067487,25067451,25057625,25057595,25057450,25047268,25047202,25044354,25044325,25035795,25035619,25034781,25033522,25024333,25023956,25016055,25015684,25007350,25007325,25007237,25005879,24989782,24987467,24978993,24978023,24977576,24977519,24976826,24976822,24976783,24970284,24970259,24970246,24969727,24969014,24968064,24968057,24965312,24965275,24960063,24958189,24957601,24957595,24957188,24952510,24951456,24951055,24950561,24950549,24927431,24927347,24927336,24927329,24927038,24917932,24916213,24916204,24908500,24905678,24904339,24893943,24893259,24893212,24893013,24892877,24892839,24884831,24883909,24883894,24883682,24883657,24878417,24877103,24870612,24869077,24869014,24855046,24855039,24854592,24854572,24837184,24836933,24834846,24834145,24826120,24826113,24826005,24816158,24816154,24815730,24815448]}").get

  test("testDisplay user exists") {
    val userService = new UserService(new MockApiClient(
      users = Array(userA, userB, userC)
    ))
    val user = userService.display("known")
    assert(user.id == "known")
  }

  test("testDisplay user doesn't exist") {
    val userService = new UserService(new MockApiClient(
      users = Array(userA, userC)
    ))
    intercept[NoSuchElementException]{
      userService.display("easton")
    }
  }
}
